Kis {
	Kis						  = Stmt+
    Stmt		  		   	= Assignment
                                
                                | FuncDecl
                                | StructDecl
                                | PrintStmt
                                | ForStmt
                                | WhileStmt
                                | ClassDecl
                                | BuiltInFunctions
                                | IncrementStmt
                                | ExpressionStmt
                                
                                | BreakStmt
                                | IfStmt
                               
                               
                                
    
    
    Assignment  	 	  = "set" id "=" Exp
    
        
    StructDecl		 	  = "type" id Struct
    Struct 			      = "{" id ":" Type "}"
    
    FuncDecl    	      = "kitty" id Params Block "nap"
    Params     		      = "(" ListOf<Param, ","> ")"
    Param      		      = id (":" id)?
    Type           		  = Type "?"                                          --optional
              		   	  | "[" Type "]"                                  --array
                          | "(" ListOf<Type, ","> ")" "->" Type           --function
                          | "isInt" "(" id ")"                            --isInt
                  		  | "isString" "(" id ")"                         --isString
                          | id                                            --id
    
    PrintStmt   		  = "meow" "(" Exp ")"
    
    
    ClassDecl			= class --NEEDS_TO_BE_COMPLETED
     

    Block 				   = ":" Stmt*  ("nap"| BreakStmt)
    IfStmt = if Exp Block (ElseifPart* ElsePart)?
    ElseifPart = elseif Exp Block
    ElsePart = else Block
    WhileStmt			= while Exp Block
    ForStmt     		  = for ForExp Block 
    ForExp      		  = id "in" id 
    
    
    BuiltInFunctions    = "kitty" AddOrConcat                               --builtin
    
    AddOrConcat = "addOrConcat" "(" paramList ")"  
    
    
    
    
    CompareStrings = identifier "==" "\"" (~"\"" any)* "\""
  
    
    
    ExpressionStmt = Exp ";"
    IncrementStmt 	   = id "++"
    BreakStmt = "break"
    
    paramList = identifier "," identifier
    identifier = letter | digit (letter | digit)*  --defining
    Indent          = "    " // Assume 4 spaces for simplicity
 	Dedent          = "\n"  // Assume dedent is a newline for simplicity
    Blocks = ":"  Indent (Stmt | ReturnStatement)* "nap"
    ReturnStatement     = "purr" Expression
    Expression = identifier + identifier |identifier identifier
  	
    
   

   StringLiteral = "\"" (~"\"" any)* "\""
    

    
    Exp      				= ("-" | "!") Exp7                              -- unary
                                | Exp1 "?" Exp1 ":" Exp                 -- ternary
                                | Exp1
  
    Exp1     			   = Exp1 "||" Exp2                                -- binary
    							| Exp1 "&&" Exp2  							 --addOrConcat
             					| Exp2
    Exp2     			   = Exp2 "&&" Exp3                                -- binary
             					| Exp3
    Exp3				   = Exp4 ("<="|"<"|"=="|"!="|">="|">") Exp4       -- binary
             					| Exp4
    Exp4     			   = Exp4 ("+" | "-") Exp5                         -- binary
             					| Exp5
    Exp5     			   = Exp5 ("*" | "/" | "%") Exp6                   -- binary
             					| Exp6
    Exp6     			   = Exp7 "**" Exp6                                -- binary
             					| Exp7
    Exp7     			   = num
             					| true
             					| false
             					| id                                                -- id
             					| Exp 
            					| "(" Exp ")"                                   -- paren_to_group
                                | StringLiteral
                                | CompareStrings
                               
             
             
    if       				= "if" ~alnum
    elseif   				= "elseif" ~alnum
    else     				= "else" ~alnum
    for      				= "fur" ~alnum
    while					= "whisker" ~alnum
    class					= "class" ~alnum   
    num					    = digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?
    true					= "true" ~idchar
    false					= "false" ~idchar
    id						= ~keyword letter alnum*
    idchar   				= letter | digit | "_"
    keyword  			    = if | elseif | else | for | while | class
    space      			   += "//" (~"\n" any)*                             --comment
}
